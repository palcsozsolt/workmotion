/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.homework.workmotion.generated.api;

import com.homework.workmotion.generated.dto.EmployeeDetails;
import com.homework.workmotion.generated.dto.ErrorDetails;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-11-22T17:34:23.725493800+01:00[Europe/Budapest]")
@Validated
@Api(value = "EmployeeRest", description = "the EmployeeRest API")
public interface EmployeeRestApi {

    /**
     * POST /employee : Create Employee
     *
     * @param employeeDetails  (required)
     * @return Create Employee. (status code 201)
     *         or Bad request. (status code 400)
     *         or Unexpected error. (status code 500)
     */
    @ApiOperation(value = "Create Employee", nickname = "createEmployee", notes = "", response = EmployeeDetails.class, tags={ "EmployeeRest", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Create Employee.", response = EmployeeDetails.class),
        @ApiResponse(code = 400, message = "Bad request.", response = ErrorDetails.class),
        @ApiResponse(code = 500, message = "Unexpected error.", response = ErrorDetails.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/employee",
        produces = "application/json",
        consumes = "application/json"
    )
    ResponseEntity<EmployeeDetails> createEmployee(@ApiParam(value = "", required = true) @Valid @RequestBody EmployeeDetails employeeDetails);


    /**
     * GET /employee/{employeeId} : Get Employee
     *
     * @param employeeId  (required)
     * @return Read Employee. (status code 200)
     *         or Bad request. (status code 400)
     *         or Item with the specified ID was not found. (status code 404)
     *         or Unexpected error. (status code 500)
     */
    @ApiOperation(value = "Get Employee", nickname = "getEmployee", notes = "", response = EmployeeDetails.class, tags={ "EmployeeRest", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Read Employee.", response = EmployeeDetails.class),
        @ApiResponse(code = 400, message = "Bad request.", response = ErrorDetails.class),
        @ApiResponse(code = 404, message = "Item with the specified ID was not found.", response = ErrorDetails.class),
        @ApiResponse(code = 500, message = "Unexpected error.", response = ErrorDetails.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/employee/{employeeId}",
        produces = "application/json"
    )
    ResponseEntity<EmployeeDetails> getEmployee(@ApiParam(value = "", required = true) @PathVariable("employeeId") UUID employeeId);


    /**
     * PUT /employee/{employeeId} : Update Employee
     *
     * @param employeeId  (required)
     * @param employeeDetails  (required)
     * @return Update Employee. (status code 200)
     *         or Bad request. (status code 400)
     *         or Item with the specified ID was not found. (status code 404)
     *         or Unexpected error. (status code 500)
     */
    @ApiOperation(value = "Update Employee", nickname = "updateEmployee", notes = "", response = EmployeeDetails.class, tags={ "EmployeeRest", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Update Employee.", response = EmployeeDetails.class),
        @ApiResponse(code = 400, message = "Bad request.", response = ErrorDetails.class),
        @ApiResponse(code = 404, message = "Item with the specified ID was not found.", response = ErrorDetails.class),
        @ApiResponse(code = 500, message = "Unexpected error.", response = ErrorDetails.class) })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/employee/{employeeId}",
        produces = "application/json",
        consumes = "application/json"
    )
    ResponseEntity<EmployeeDetails> updateEmployee(@ApiParam(value = "", required = true) @PathVariable("employeeId") UUID employeeId,@ApiParam(value = "", required = true) @Valid @RequestBody EmployeeDetails employeeDetails);

}
